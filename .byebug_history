c
User.find_by_id(params[:trans_log][:user_id])
User.find_by_id(params[:user_id])
@user
 @user.amount
@trans_log.trans_type == 0 
@trans_log.trans_type == 0 ?
c
exit
@user = User.find_by_id(params[:trans_log][:user_id])
params[:trans_log]
params
@trans_log.trans_type
@trans_log = TransLog.new(trans_log_params)
params
c
user.trans_logs.new
 user = User.find_by_id(params[:user_id])
User.find_by_id(params[:user_id])
c
params
c
@users.count
@users
c
@user
@user.present?
c
@user
c
@user =  User.find_by_email(params[:email])
User.find_by_email(params[:email])
c
params
c
params
c
transaction.trans_type 
transaction.trans_types 
transaction.trans_types == 0
 transaction.trans_types == ""
if transaction.trans_types == 0
c
self
c
parent_user.is_company_admin?
c
parent_user.is_company_admin?
n
parent_user.is_company_admin?
self.parent
self
c
parent.present? && parent.descendants.present?
User.find_by_id(user_id)
c
@user.role_id == "Company Admin"
@user.role_id 
@user.role_id == 1
@user
c
user_id
parent.descendants
c
parent.descendants.sum(:percentage)
parent = User.find_by_id(user_id)
find_remaining_partner_ship
c
current_user.root
c
Transaction.new(transaction_params)
c
Transaction.new(transaction_params)
c
exit
Transaction.new(transaction_params)
transaction_params
c
exit
Transaction.new(transaction_params)
c
Transaction.new(transaction_params)
c
Transaction.new("amount"=>"1000.0", type: "", "user_id"=>"4")
Transaction.new("amount"=>"1000.0", "type"=>"0", "user_id"=>"4")
transaction_param
Transaction.new(transaction_params)
transaction_params
params
c
params
c
@user.save
@user = @referral_user.children.new(user_params)
@user.save
n
 @referral_user.children.new(user_params)
@referral_user
@referral_user.nil?
c
@referral_user.nil?
c
@user_id = params[:reff_user]
c
params[:id]
c
params
c
@user
c
params
c
params
